
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `Dbcontext`
//     Provider:               `System.Data.Sqlclient`
//     Connection String:      `Server=.;Database=SAMSUNG;User=sa;password=123`
//     Schema:                 ``
//     Include Views:          `False`


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace models
{
	public partial class DbcontextDB : Database
	{
		public DbcontextDB() 
			: base("Dbcontext")
		{
			CommonConstruct();
		}

		public DbcontextDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			DbcontextDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static DbcontextDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new DbcontextDB();
        }

		[ThreadStatic] static DbcontextDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        
		public class Record<T> where T:new()
		{
			public static DbcontextDB repo { get { return DbcontextDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }
			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }
			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
		}
	}
	

    
	[TableName("dbo.color")]
	[PrimaryKey("id", AutoIncrement=false)]
	[ExplicitColumns]
    public partial class color : DbcontextDB.Record<color>  
    {
		[Column] public int id { get; set; }
		[Column] public string ColorName { get; set; }
		[Column] public string RGB { get; set; }
	}
    
	[TableName("dbo.Phone")]
	[PrimaryKey("id")]
	[ExplicitColumns]
    public partial class Phone : DbcontextDB.Record<Phone>  
    {
		[Column] public int id { get; set; }
		[Column] public string name { get; set; }
		[Column] public string color { get; set; }
		[Column] public string Version { get; set; }
		[Column] public decimal? Price { get; set; }
		[Column] public DateTime? ListedTime { get; set; }
		[Column] public int? Type { get; set; }
	}
    
	[TableName("dbo.PhoneConfig")]
	[ExplicitColumns]
    public partial class PhoneConfig : DbcontextDB.Record<PhoneConfig>  
    {
		[Column] public int? id { get; set; }
		[Column] public string Memory { get; set; }
		[Column] public string CpuFrequency { get; set; }
		[Column] public string CpuNuclear { get; set; }
		[Column] public string Size { get; set; }
		[Column] public string Resolution { get; set; }
		[Column] public string Type { get; set; }
		[Column] public string color { get; set; }
		[Column] public string MainCamera { get; set; }
		[Column("Main-Aperture")] public string Main_Aperture { get; set; }
		[Column("Main-Flash")] public string Main_Flash { get; set; }
		[Column("Main-Autofocus")] public string Main_Autofocus { get; set; }
		[Column("Main-Pixels")] public string Main_Pixels { get; set; }
		[Column] public string FrontCamera { get; set; }
		[Column("FrontCamera-Aperture")] public string FrontCamera_Aperture { get; set; }
		[Column("Front-facingCamera-autofocus")] public string Front_facingCamera_autofocus { get; set; }
		[Column] public string VideoShoot { get; set; }
	}
    
	[TableName("dbo.Type")]
	[PrimaryKey("id")]
	[ExplicitColumns]
    public partial class Type : DbcontextDB.Record<Type>  
    {
		[Column] public int id { get; set; }
		[Column] public string TypeName { get; set; }
	}
}
